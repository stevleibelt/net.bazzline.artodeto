#!/usr/bin/env bash
####
# takes care of the calendar week section
####
# @author stev leibelt <artodeto@bazzline.net>
# @since 2018-05-13
####

####
# @NUMBER: int
####
function add_zero_if_number_is_less_then_ten
{
    local NUMBER="${1}"

    if [[ ${NUMBER} -lt 10 ]];
    then
        echo "0${NUMBER}"
    else
        echo "${NUMBER}"
    fi
}

####
# @FILE_NAME_OF_THE_NEXT_CALENDAR_WEEK: string
####
function create_next_calendar_week
{
    if [[ $# -ne 1 ]];
    then
        echo ":: Invalid number of arguments provided."
        echo "   ${FUNCNAME[0]}: <string: file name of the next calendar week>"

        return 1
    fi

    local FILE_NAME_OF_THE_NEXT_CALENDAR_WEEK="${1}"

    echo ":: Create next calendar week."

    if [[ ! -f "${FILE_NAME_OF_THE_NEXT_CALENDAR_WEEK}" ]];
    then
        touch "${FILE_NAME_OF_THE_NEXT_CALENDAR_WEEK}"
    fi

    echo "   done."
}

####
# @ABSOLUTE_PATH_TO_THE_CURRENT_CALENDAR_WEEK_YEAR: string
# @FILE_NAME_OF_THE_CURRENT_CALENDAR_WEEK_DRAFT: string
# @FILE_NAME_OF_THE_CURRENT_CALENDAR_WEEK: string
####
function release_current_calendar_week
{
    if [[ $# -ne 3 ]];
    then
        echo ":: Invalid number of arguments provided."
        echo "   ${FUNCNAME[0]}: <string: absolute path to the current calendar week year> <string: file name of the current calendar week draft> <string: file name of the current calendar week>"

        return 1
    fi

    local ABSOLUTE_PATH_TO_THE_CURRENT_CALENDAR_WEEK_YEAR="${1}"
    local FILE_NAME_OF_THE_CURRENT_CALENDAR_WEEK_DRAFT="${2}"
    local FILE_NAME_OF_THE_CURRENT_CALENDAR_WEEK="${3}"

    echo ":: Release current calendar week."

    echo "   absolute path to the current calendar week year >>${ABSOLUTE_PATH_TO_THE_CURRENT_CALENDAR_WEEK_YEAR}<<" >> ${FILE_PATH_OF_THE_DEBUG_LOG}

    if [[ ! -d "${ABSOLUTE_PATH_TO_THE_CURRENT_CALENDAR_WEEK_YEAR}" ]];
    then
        /usr/bin/env mkdir -p "${ABSOLUTE_PATH_TO_THE_CURRENT_CALENDAR_WEEK_YEAR}"
    fi

    cd "${ABSOLUTE_PATH_TO_THE_CURRENT_CALENDAR_WEEK_YEAR}"

    if [[ -f "${FILE_NAME_OF_THE_CURRENT_CALENDAR_WEEK_DRAFT}" ]];
    then
        echo "   filename of the current calendar week draft >>${FILE_NAME_OF_THE_CURRENT_CALENDAR_WEEK_DRAFT}<<" >> ${FILE_PATH_OF_THE_DEBUG_LOG}
        echo "   filename of the current calendar week>>${FILE_NAME_OF_THE_CURRENT_CALENDAR_WEEK}<<" >> ${FILE_PATH_OF_THE_DEBUG_LOG}
        git mv "${FILE_NAME_OF_THE_CURRENT_CALENDAR_WEEK_DRAFT}" "${FILE_NAME_OF_THE_CURRENT_CALENDAR_WEEK}"
    fi

    cd -
    echo "   done."
}

####
# @FILE_NAME_OF_THE_CURRENT_SOFT_LINK: string
# @RELATIVE_PATH_TO_THE_NEXT_CALENDAR_WEEK: string
####
function updating_soft_link
{
    if [[ $# -ne 2 ]];
    then
        echo ":: Invalid number of arguments provided."
        echo "   ${FUNCNAME[0]}: <string: file name of the current soft link> <string: relative file path to the next calendar week>"

        return 1
    fi

    local FILE_NAME_OF_THE_CURRENT_SOFT_LINK="${1}"
    local RELATIVE_PATH_TO_THE_NEXT_CALENDAR_WEEK="${2}"

    echo ":: Updating soft link."

    echo "   file name of the current soft link>>${FILE_NAME_OF_THE_CURRENT_SOFT_LINK}<<" >> ${FILE_PATH_OF_THE_DEBUG_LOG}

    if [[ -h "${FILE_NAME_OF_THE_CURRENT_SOFT_LINK}" ]];
    then
        echo "   removing >>${FILE_NAME_OF_THE_CURRENT_SOFT_LINK}<<" >> ${FILE_PATH_OF_THE_DEBUG_LOG}
        rm "${FILE_NAME_OF_THE_CURRENT_SOFT_LINK}"
    else
        echo "   file >>${FILE_NAME_OF_THE_CURRENT_SOFT_LINK}<< does not exist" >> ${FILE_PATH_OF_THE_DEBUG_LOG}
    fi

    echo "   creating softlink >>${FILE_NAME_OF_THE_CURRENT_SOFT_LINK}<< for >>${RELATIVE_PATH_TO_THE_NEXT_CALENDAR_WEEK}<<" >> ${FILE_PATH_OF_THE_DEBUG_LOG}
    ln -s "${RELATIVE_PATH_TO_THE_NEXT_CALENDAR_WEEK}" "${FILE_NAME_OF_THE_CURRENT_SOFT_LINK}"

    echo "   done."
}

#begin of dependencies
CURRENT_CALENDAR_WEEK=$(date +%V)
CURRENT_WORKING_DIRECTORY=$(pwd)
CURRENT_YEAR=$(date +%Y)
FILE_NAME_OF_THE_CURRENT_SOFT_LINK="current_calendar_week"
ABSOLUTE_PATH_OF_THIS_SCRIPT=$(cd $(dirname "$0"); pwd)

NEXT_CALENDAR_WEEK=$(calc ${CURRENT_CALENDAR_WEEK}+1)
ABSOLUTE_PATH_OF_THE_ROOT="${ABSOLUTE_PATH_OF_THIS_SCRIPT}/.."

CURRENT_CALENDAR_WEEK=$( add_zero_if_number_is_less_then_ten ${CURRENT_CALENDAR_WEEK})
NEXT_CALENDAR_WEEK=$( add_zero_if_number_is_less_then_ten ${NEXT_CALENDAR_WEEK})
RELATIVE_PATH_TO_THE_CALENDAR_WEEK="link/${CURRENT_YEAR}/calendar_week"

FILE_NAME_OF_THE_CURRENT_CALENDAR_WEEK_DRAFT=draft-${CURRENT_CALENDAR_WEEK}.md
FILE_NAME_OF_THE_CURRENT_CALENDAR_WEEK=${CURRENT_CALENDAR_WEEK}.md
FILE_NAME_OF_THE_NEXT_CALENDAR_WEEK=draft-${NEXT_CALENDAR_WEEK}.md
FILE_PATH_OF_THE_DEBUG_LOG="${ABSOLUTE_PATH_OF_THE_ROOT}/debug.log"
ABSOLUTE_PATH_TO_THE_CURRENT_CALENDAR_WEEK_YEAR="${ABSOLUTE_PATH_OF_THE_ROOT}/${RELATIVE_PATH_TO_THE_CALENDAR_WEEK}"
#end of dependencies

#begin of business logic

# @todo
#   - instead of expecting current calendar week, just use the softlink to determine the current draft
#   - put all into a main function to not polute the global name space
cd "${ABSOLUTE_PATH_OF_THE_ROOT}"

echo ":: Start of run" > ${FILE_PATH_OF_THE_DEBUG_LOG}
echo ":: Dumping properties." >> ${FILE_PATH_OF_THE_DEBUG_LOG}
echo "  CURRENT_WORKING_DIRECTORY: ${CURRENT_WORKING_DIRECTORY}" >> ${FILE_PATH_OF_THE_DEBUG_LOG}
echo "  CURRENT_YEAR: ${CURRENT_YEAR}" >> ${FILE_PATH_OF_THE_DEBUG_LOG}
echo "  FILE_NAME_OF_THE_CURRENT_SOFT_LINK: ${FILE_NAME_OF_THE_CURRENT_SOFT_LINK}" >> ${FILE_PATH_OF_THE_DEBUG_LOG}
echo "  ABSOLUTE_PATH_OF_THIS_SCRIPT: ${ABSOLUTE_PATH_OF_THIS_SCRIPT}" >> ${FILE_PATH_OF_THE_DEBUG_LOG}
echo "  ABSOLUTE_PATH_OF_THE_ROOT: ${ABSOLUTE_PATH_OF_THE_ROOT}" >> ${FILE_PATH_OF_THE_DEBUG_LOG}
echo "  CURRENT_CALENDAR_WEEK: ${CURRENT_CALENDAR_WEEK}" >> ${FILE_PATH_OF_THE_DEBUG_LOG}
echo "  NEXT_CALENDAR_WEEK: ${NEXT_CALENDAR_WEEK}" >> ${FILE_PATH_OF_THE_DEBUG_LOG}
echo "  RELATIVE_PATH_TO_THE_CALENDAR_WEEK: ${RELATIVE_PATH_TO_THE_CALENDAR_WEEK}" >> ${FILE_PATH_OF_THE_DEBUG_LOG}
echo "  FILE_NAME_OF_THE_CURRENT_CALENDAR_WEEK_DRAFT: ${FILE_NAME_OF_THE_CURRENT_CALENDAR_WEEK_DRAFT}" >> ${FILE_PATH_OF_THE_DEBUG_LOG}
echo "  FILE_NAME_OF_THE_CURRENT_CALENDAR_WEEK: ${FILE_NAME_OF_THE_CURRENT_CALENDAR_WEEK}" >> ${FILE_PATH_OF_THE_DEBUG_LOG}
echo "  FILE_NAME_OF_THE_NEXT_CALENDAR_WEEK: ${FILE_NAME_OF_THE_NEXT_CALENDAR_WEEK}" >> ${FILE_PATH_OF_THE_DEBUG_LOG}
echo "  FILE_PATH_OF_THE_DEBUG_LOG: ${FILE_PATH_OF_THE_DEBUG_LOG}" >> ${FILE_PATH_OF_THE_DEBUG_LOG}
echo "  ABSOLUTE_PATH_TO_THE_CURRENT_CALENDAR_WEEK_YEAR: ${ABSOLUTE_PATH_TO_THE_CURRENT_CALENDAR_WEEK_YEAR}" >> ${FILE_PATH_OF_THE_DEBUG_LOG}

echo ":: Start of >>release_current_calendar_week<<" >> ${FILE_PATH_OF_THE_DEBUG_LOG}
release_current_calendar_week "${ABSOLUTE_PATH_TO_THE_CURRENT_CALENDAR_WEEK_YEAR}" "${FILE_NAME_OF_THE_CURRENT_CALENDAR_WEEK_DRAFT}" "${FILE_NAME_OF_THE_CURRENT_CALENDAR_WEEK}"

cd "${ABSOLUTE_PATH_TO_THE_CURRENT_CALENDAR_WEEK_YEAR}"

echo ":: Start of >>create_next_calendar_week<<" >> ${FILE_PATH_OF_THE_DEBUG_LOG}
create_next_calendar_week "${FILE_NAME_OF_THE_NEXT_CALENDAR_WEEK}"

cd "${ABSOLUTE_PATH_OF_THE_ROOT}"

echo ":: Start of >>updating_soft_link<<" >> ${FILE_PATH_OF_THE_DEBUG_LOG}
updating_soft_link "${FILE_NAME_OF_THE_CURRENT_SOFT_LINK}" "${RELATIVE_PATH_TO_THE_CALENDAR_WEEK}/${FILE_NAME_OF_THE_NEXT_CALENDAR_WEEK}"

echo ":: Finished of run" >> ${FILE_PATH_OF_THE_DEBUG_LOG}

cd "${CURRENT_WORKING_DIRECTORY}"
#end of business logic

#for later if we want to do more
#while true;
#do
#    echo ":: What do you want to do?"
#    echo "   [0] release current calendar week"
#    echo ""
#
#    read USER_INPUT
#    case ${USER_INPUT} in
#        0)  release_current_calendar_week 
#            break;;
#    esac
#done
